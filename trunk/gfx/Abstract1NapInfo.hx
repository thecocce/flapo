
import gamelib2d.MapData;

class Abstract1NapInfo extends MapData
{
  public function new ()
  {
    name = "Nap";
    mapW = 33;
    mapH = 31;
  }

  override public function mapdata () : Array<Array<Int>> {
  return 
  [[  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  2,  2,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  2,  2,  5,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  6,  2,  2,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  2,  2,  7,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  2,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  2,  5,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  6,  2,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  2,  7,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  5,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  6,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  7,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  2,  2,  2,  2,  2,
      2,  2,  5,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  8,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  6,  2,  2,  2,  2,  2,
      2,  2,  7,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  9],
   [  2, 10,  8,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4,  2,  2,  2,  2,
      2,  5,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  9, 11,  2],
   [  2,  2,  2, 10,  8,  3,  3,  3,  3,  3,  3,  3,  3,  6,  2,  2,  2,  2,
      2,  7,  3,  3,  3,  3,  3,  3,  3,  3,  9, 11,  2,  2,  2],
   [  2,  2,  2,  2,  2, 10,  8,  3,  3,  3,  3,  3,  3,  3,  4,  2,  2,  2,
      5,  3,  3,  3,  3,  3,  3,  3,  9, 11,  2,  2,  2,  2,  2],
   [  2,  2,  2,  2,  2,  2,  2, 10,  8,  3,  3,  3,  3,  3,  6,  2,  2,  2,
      7,  3,  3,  3,  3,  3,  9, 11,  2,  2,  2,  2,  2,  2,  2],
   [  2,  2,  2,  2,  2,  2,  2,  2,  2, 10,  8,  3,  3,  3,  3,  4,  2,  5,
      3,  3,  3,  3,  9, 11,  2,  2,  2,  2,  2,  2,  2,  2,  2],
   [  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 10,  8,  3,  3,  6, 12,  7,
      3,  3,  9, 11,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
   [  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 10,  8,  3,  3,  3,
      9, 11,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
   [  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 13,  3,  3,  3,
     14,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
   [  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 15, 16,  3,  3,  3,
     17, 18,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
   [  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 15, 16,  3,  3, 19, 20, 21,
      3,  3, 17, 18,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2],
   [  2,  2,  2,  2,  2,  2,  2,  2,  2, 15, 16,  3,  3,  3,  3, 22,  2, 23,
      3,  3,  3,  3, 17, 18,  2,  2,  2,  2,  2,  2,  2,  2,  2],
   [  2,  2,  2,  2,  2,  2,  2, 15, 16,  3,  3,  3,  3,  3, 19,  2,  2,  2,
     21,  3,  3,  3,  3,  3, 17, 18,  2,  2,  2,  2,  2,  2,  2],
   [  2,  2,  2,  2,  2, 15, 16,  3,  3,  3,  3,  3,  3,  3, 22,  2,  2,  2,
     23,  3,  3,  3,  3,  3,  3,  3, 17, 18,  2,  2,  2,  2,  2],
   [  2,  2,  2, 15, 16,  3,  3,  3,  3,  3,  3,  3,  3, 19,  2,  2,  2,  2,
      2, 21,  3,  3,  3,  3,  3,  3,  3,  3, 17, 18,  2,  2,  2],
   [  2, 15, 16,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 22,  2,  2,  2,  2,
      2, 23,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 17, 18,  2],
   [ 16,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 19,  2,  2,  2,  2,  2,
      2,  2, 21,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 17],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 22,  2,  2,  2,  2,  2,
      2,  2, 23,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 19,  2,  2,  2,  2,  2,  2,
      2,  2,  2, 21,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 22,  2,  2,  2,  2,  2,  2,
      2,  2,  2, 23,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 19,  2,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  2, 21,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 22,  2,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  2, 23,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3, 19,  2,  2,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  2,  2, 21,  3,  3,  3,  3,  3,  3,  3,  3,  3],
   [  3,  3,  3,  3,  3,  3,  3,  3,  3, 22,  2,  2,  2,  2,  2,  2,  2,  2,
      2,  2,  2,  2,  2, 23,  3,  3,  3,  3,  3,  3,  3,  3,  3]]; 
  }

  override public function boundmapdata () : Array<Array<Int>> {
  return 
  [[  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
   [  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
      0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]]; 
  }
}
